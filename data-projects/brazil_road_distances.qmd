---
title: "Road distances and trip duration matrix for Brazilian municipalities"
bibliography: references.bib
image: images/map_route.png
---

## Introduction

Distance information between places is useful to evaluate the proximity and interconnection of regions. The Euclidean distance between two places, although simple and easy to compute, is not realistic in terms of dislocation costs. This dataset present the **road distance and trip duration metrics** between all Brazilian municipalities.

## Methods

As reference to starting and ending point of the routes, I opted to use the municipality seat localization ("sede dos municípios"), which is usually the city hall or historic downtown localization. This data is originally generated by the Brazilian Institute of Geography and Statistics (IBGE) and available on the [{geobr}](https://ipeagit.github.io/geobr/) package. The last available data is for the year of 2010[^1] and present 5,565 features.

[^1]: As new data for the 2022 Brazilian Census be available, the dataset will be likely updated.

With the list of municipalities and respective seat geographic coordinates, a list of pairs of municipalities is computed using simple combinatorial analysis. Example:

```{r}
x <- c("a", "b", "c", "d")

combn(x, m = 2)
```

::: callout-note
With this, I assume that the distance between two municipalities is the same, independently of the direction.
:::

Thus, for the 5,565 municipalities, we will have a total number of routes to be computed:

```{r}
choose(n = 5565, k = 2)
```

To compute the road distance between pairs of municipalities, the [OSRM](http://project-osrm.org/) API service was used, with the [{osrm}](https://cran.r-project.org/package=osrm) package [@osrm_paper_2022]. More specifically, the table service was used, considering the "car" profile, returning as result the distance in **meters** and estimated trip duration in **minutes** for the **fastest** route found.

### Route example

For example, lets compute the road distance between Rio de Janeiro, RJ and São Paulo, SP with the {osrm} package.

```{r}
#| message: false
#| warning: false
library(geobr)
library(osrm)
library(leaflet)
library(sf)

seats <- read_municipal_seat(showProgress = FALSE)

rj <- subset(seats, code_muni == 3304557)
sp <- subset(seats, code_muni == 3550308)

route <- osrmRoute(
  src = rj, dst = sp, 
  overview = "full",
  osrm.profile = "car"
)
```

```{r}
# Route distance, in meters
route$distance
```

```{r}
# Route duration, in minutes
route$duration
```

```{r}
route |>
  st_transform(4326) |>
  leaflet() |>
  addTiles() |>
  addPolylines()
```

::: callout-important
For some pairs of municipalities, the OSRM service is not able to determine a possible road route. This is expected, as some municipalities are reachable only by plane or boat.
:::

The scripts used to prepare the dataset are available [here](https://github.com/rfsaldanha/distbrasil).

## Dataset download

The dataset with the road distances and trip duration are available on Zenodo, on RDS format, parquet format, and CSV (zipped) format.

Click the link below to access and download the data.

[![](https://zenodo.org/badge/DOI/10.5281/zenodo.11400243.svg)](https://doi.org/10.5281/zenodo.11400243)

You can also download the dataset directly from R, using the [{zendown}](https://rfsaldanha.github.io/zendown/) package.

```{r}
#| message: false
#| warning: false
# install.packages("zendown")
library(zendown)

dist_brasil_file <- zen_file(11400243, "dist_brasil.rds")

dist_brasil <- readRDS(dist_brasil_file)

head(dist_brasil)
```

### Graphs

```{r}
#| message: false
#| warning: false
library(ggplot2)

ggplot(data = dist_brasil, aes(x = dist/1000)) +
  geom_histogram(bins = 100) +
  labs(
    title = "Fastest route road distance between Brazilian municipalities", 
    x = "Distance (km)", y = "count"
  ) +
  theme_bw()
```

```{r}
#| message: false
#| warning: false
ggplot(data = dist_brasil, aes(x = dur/60)) +
  geom_histogram(bins = 100) +
  labs(
    title = "Fastest route estimated trip duration between Brazilian municipalities", 
    x = "Trip duration (hours)", y = "count"
  ) +
  theme_bw()
```

## Future plans

-   Compute routes using other available routing services.

-   Yearly updates of the dataset, as the road infrastructure may change.